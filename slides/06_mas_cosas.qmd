---
title: "Más cosas con Quarto"
date: 2024-05-20  #- ISO8601 YYYY-MM-DD format 
subtitle: | 
  {{< var my_subtitle2 >}}
date-format: long
lang: es
format: 
  revealjs:
#    theme: dark
    scrollable: true
    slide-level: 3
    height: 900
    width: 1600
    toc: false
    from: markdown+emoji  #- usar emojis https://gist.github.com/rxaviers/7360908)
    center-title-slide: true
    title-slide-attributes: #- atributos para la slide de titulo
      data-background-color: "#562457"   #- color de R-ladies
      #data-background-image: /imagenes/economia.gif
      #data-background-size: contain      
    preview-links: auto  #- true: abre un iframe en lugar de abrir ventana
    #multiplex: true  #- para que puedas manejar las slides del publico
    link-external-newwindow: true
    transition: fade
    #height: 900
    #width: 1600
    fontcolor: "#262d36"
    highlight-style: a11y
    code-line-numbers: true
    number-sections: false
    slide-number: c/t   # https://pandoc.org/MANUAL.html#structuring-the-slide-show
    incremental: false   # https://quarto.org/docs/presentations/#incremental-lists
    #code-link: true

#logo: imagenes/economia.gif
#footer: |
#        {{< var webcurso >}}
revealjs-plugins: [pointer]
#include-after-body: [./webexercises/webex.js]
#css: [webexercises/webex.css]
#include-after-body: [webexercises/webex.js]

  # - lightbox
  # - pointer  # hay q apretar q
#css: assets/styles_slides_intro.css
    #theme: [moon, custom.scss]
embed-resources: true
bibliography: references.bib
---

## Con Quarto se pueden hacer muu:scream_cat:uuchas más cosas!!! {.unnumbered background-color="#ebf5fb"}

{{< var lineanaranja >}}

<br>

Veamos algunas de ellas

### 6.1 Subir nuestra web a la UV

-   Una vez hemos generado nuestra web en local con Quarto nos queda **subirla a Internet**. La documentación oficial de Quarto está [aquí](https://quarto.org/docs/publishing/)

-   Hay muchos servicios de alojamiento, [por ejemplo](https://info5940.infosci.cornell.edu/slides/publishing-reproducible-documents/#/publishing).

-   [Aquí](https://jadeyryan.com/blog/2023-11-19_publish-quarto-website/) explican las ventajas y cómo subir una web a [Netlify](https://www.netlify.com/).

. . .

-   Pero ... nosotros tenemos un **espacio en la web de la UV**, así que ...


### Práctica: Subir nuestra web

::: {.callout-important icon="false"}
#### Tarea 6.1a: Subir nuestra web

::: panel-tabset
## Tarea

-   Sí, tienes que subir nuestra web a nuestro espacio en el servidor web de la UV

## Pistas

-   Para subir nuestra web a nuestro espacio UV, solo **tenemos que subir los ficheros** de la carpeta `docs` o `_site` a la web de la UV

-   Pero antes, **hay que tener activado vuestro espacio web en UV**. Veamos cómo hacerlo con [este post](../blog/72_publicando-en-UV.qmd){target="_blank"}
:::
:::

. . .

-   Perfecto!!, pero, imagina que te vas a un congreso y **quieres subir unas slides** para poder hacer la presentación desde la web. ¿Cómo lo haces?

::: {.callout-important icon="false"}
#### Tarea 6.1b: Subir unas slides

::: panel-tabset
## Tarea

-   Sí, tienes que subir unas revealjs slides a tu espacio web en la UV

## Pistas

-   Si has hecho las slides autocontenidas, entonces sólo tendrás que subir el fichero `my_slides.html` a tu espacio web en la UV

-   Consejo: yo alojaría las slides en un directorio llamado `slides` o `presentaciones` o algo similar
:::
:::

### 6.2 Gestión de bibliografia

-   Imagina que en uno de nuestros post queremos **incorporar referencias bibliográficas** y además **referenciarlas** en el cuerpo del artículo ¿te suena, no?

. . .

Además,

-   **no queremos tener que copiar a mano las referencias** y

-   tampoco queremos tener que **cambiar el formato 😱😱 de las referencias** si es que decidimos cambiar de revista

. . .

<br>

#### ¿Cómo lo hacemos?

-   Os lo cuento en [este post](../blog/20_referencias-bibliograficas.qmd){target="_blank"}, y vamos a practicarlo con una tarea


### Práctica: Gestión de bibliografía

- Para ello, vamos a utilizar el archivo: `./tareas/tarea_6.2_biblio.qmd` que puedes encontrar en el  "Qproj_01_eurovision" que puedes descargarte [aquí](../recursos/Qproj_01_eurovision.zip)

. . . 

::: {.callout-important icon="false"}
#### Tarea 6.2: Incorporar y gestionar referencias bibliográficas

::: panel-tabset
## Tarea 6.2.a

- Resulta que ya tenemos el documento `.bib` con la información de nuestras refrencias. Está en: `./assets/refrences.bib`

- Tenemos que referenciar el documento `.bib` en el yaml del `.qmd`. Algo como: 

```yaml
bibliography: <ruta-a-my_references.bib>
```

<br>

- Pero ... tenéis que **pensar como poner la ruta** a:  `./assets/references.bib`

<br>

- Una vez hecho, procesa el `.qmd` . ¿Qué ha pasado? ¿Se han incorporado las referencias?

- No. ¿Por qué? 🤔

## Tarea 6.2.b

- Por defecto solo se muestran las referencias que hemos utilizado en nuestro `.qmd`

- Así que, vamos a incorporar en el texto de nuestro `.qmd` algunas alusiones a nuestras referencias.

- Para ello vamos a utilizar el editor Visual de RStudio. 


## Tarea 6.2.c


- Ahora vamos a **añadir una nueva referencia** a nuestro fichero `.bib`. Por ejemplo [esta](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1356747?casa_token=PfUP1HKCHbAAAAAA%3As_TIIDxWNKpmZJ7p5NVU_NIaYQoES0D0JgszZxIMtEGLsJVZpwvzxuIsGwJvat2qIo-FbxSNg0lv)

- Para ello, también vamos a usar el editor Visual de RStudio

- Insertemos una alusión a esta nueva referencia en el texto de nuestro `.qmd`; si no, no apareceré en el listado de referencias.

## Tarea 6.2.d

- Por defecto Pandoc, y por ende Quarto, usa el ["Chicago Manual of Style"](https://www.chicagomanualofstyle.org/home.html), pero podemos cambiarlo.

- Por ejemplo, vamos a cambiar el estilo de las referencias a ["American Psychological Association"](https://apastyle.apa.org/)

- Para ellos hay que obtener/usar un archivo [CSL (Citation Style Language)](https://citationstyles.org/)

- Puedes obtener ficheros `.csl` para multitud de formatos [aquí](https://www.zotero.org/styles). Solo tenemos que buscar el estilo que queremos y descargarlo.

- Por ejemplo, nos descargamos el fichero para el formato APA 7th edition. [Este](https://www.zotero.org/styles/apa) es el enlace de descarga

- Para usar el archivo `.csl` que acabamos de descargar hay que referenciarlo en el yaml, añadiendo algo como:

```yaml
csl: <ruta-a-my-fichero.csl>
```

- Vuelve a procesar el `.qmd`. ¿Qué ha pasado? ¿Se han cambiado las referencias?


:::
:::

<br><br>

### 6.3 Generar el mismo documento en múltiples formatos

- Sí, una de las múltiples ventajas de Quarto es que, con un mismo documento `.qmd` (o documento fuente) podemos generar **documentos en múltiples formatos**. Por ejemplo, `.html`, `.docx`, `.pdf`, `.epub` etc.

<br>

. . .

<center>¿Cómo? Solo hay que hacer **2 cosas**: </center>

::: {.incremental}
1) especificarlo en el YAML, por ejemplo:

    ``` yaml
    title: Mi documento
    author: Pedro J. Pérez
    toc: true
    format: 
      html: default
      epub: default
      docx: default
    ```

2) El render del documento se ha de hacer **desde la Terminal**:

    ``` bash
    quarto render mi-multi-format-document.qmd
    ```
:::


### Múltiples formatos (más posibilidades)

<br>

::: {.callout icon="false"}

### Render, con opciones, desde la Terminal

- Otra posibilidad es hacer el Render desde la Terminal con opciones. Algo como:

    ```bash
    quarto render my-document.qmd --to pdf

    quarto render tareas/tarea_6.3_varios-formatos.qmd --to epub
    ```
:::

<br>

. . . 

::: {.callout icon="false"}

### Otra posibilidad

- Los documentos `.html` que generemos, ya sean estos documentos individuales o dentro de una web, pueden incluir links al mismo documento en **otros formatos**. Documentación [aquí](https://quarto.org/docs/output-formats/html-multi-format.html).

- El YAML del documento tendría que quedar algo como:

  ```bash
  format: 
    html: default
    docx: default
  format-links: [docx]
  ```
:::



### Práctica: Documentos con varios formatos

<br>

::: {.callout-important icon="false"}
#### Tarea 6.3: Obtener varios formatos con el mismo `.qmd`

::: panel-tabset
## Tarea

- Procesa el documento: `./tareas/tarea_6.3_varios-formatos.qmd`. Lo puedes encontrar en el  "Qproj_01_eurovision" que puedes descargarte [aquí](../recursos/Qproj_01_eurovision.zip)

- Fíjate que el yaml ya está preparado para generar 2 formatos: `.html` y `.docx`

- Recuerda que hay que hacer el Render desde la Terminal  🤔

## Solución

- En la terminal has de escribir algo como:

```bash
quarto render tareas/tarea_6.3_varios-formatos.qmd
```
:::
:::



### Ejercicios interactivos

-   Hay varios paquetes como [learnr](https://rstudio.github.io/learnr/) que permiten incorporar **ejercicios interactivos** a documentos `.html` generados con Quarto, pero ...

. . .

|       ... tienen un **inconveniente**: los tutoriales deben ser ejecutados locamente
|           o alojados en un servidor shiny

. . .

<br>

-   El paquete [webexercises](https://github.com/PsyTeachR/webexercises) **soluciona ese problema** ya que genera "standalone HTML files that require only a JavaScript-enabled browser".

-   El objetivo de **webexercises** es:

> To enable instructors to easily **create interactive web pages** that students can use in **self-guided learning**



### Práctica: Ejercicios interactivos con [webexercises](https://github.com/PsyTeachR/webexercises)

<br>


::: {.callout-important icon="false"}
#### Tarea 6.4: Jugar un poco con webexercises

::: panel-tabset
## Tarea 6.4.a

- Abre el documento: `tareas/tarea_6.4_webexercises.qmd` que puedes encontrar en el  "Qproj_01_eurovision" que puedes descargarte [aquí](../recursos/Qproj_01_eurovision.zip)

- Mira su contenido

- Procesa el documento 

- Abre el documento html que se ha generado y ... trata de resolver las preguntas

## Tarea 6.4.b

- Añade una nueva pregunta

## Una solución a  6.4.b

<br>

```{{{r}}}
#| results: asis
opts <- c(
   "Quarto es cuatro en balinés",
   answer = "Un sistema de publicación científico-técnica de acceso abierto que es lo más!!!",
   "Quarto es una marca de muebles sueca"
)

cat("¿Qué es Quarto?", longmcq(opts))
```

<br>


## Algunos detalles

- Para usar el paquete hay que instalarlo, por ejemplo con: `pak::pak("webexercises")`

<br>

- Para procesar correctamente los ficheros "webexercises" hay que tener los .css y .js necesarios. Para ello: 
```r
webexercises::add_to_quarto(include_dir = "assets/webexercises")

```

- Cuidado porque genera ruta a los assets en el YAML del fichero `.qmd`, pero también en el fichero `_quarto.yml`

<br>

- Nosotros ya teníamos una plantilla "webexercises" en la carpeta `./tareas/tarea_6.4_webexercises.qmd`. La creé con algo como: 
  
```r
webexercises::create_quarto_doc(name = "my_titulo", open = interactive())

```

<br>

:::
:::


### 6.5 Incorporar tablas 

-   A veces veces tenemos **unos datos**, o un listado de algo como: tareas, estudiantes, calendario etc... **en un fichero Excel**, o Google Sheet, que queremos incorporar a nuestros documentos, ¿Cómo lo hacemos?

. . .

- Si tenemos los datos en el fichero `datos/matriculados.xlsx` solo habría que:

:::: columns
::: {.column width="50%"}

```{{r}}
df <- rio::import("./datos/matriculados.xlsx")
gt::gt(df)
```
:::

::: {.column width="50%"}
```{{r}}
df <- rio::import("./datos/matriculados.xlsx")
DT::datatable(df)
```
:::
::::

. . .

<br>

::: {.callout icon="false"}
#### Si los datos los tuviesemos **en Google Sheets**:

```r
# googlesheets4::gs4_deauth() #- si tuvieses q autorizar
my_url <- "https://docs.google.com/spreadsheets/d/16XpV9I0_hoyPqV6o7Pkir4c_mmwgHM4UuGXuM7t7vUc/edit?usp=sharing"
df <- googlesheets4::read_sheet(my_url)
gt::gt(df)
```
<br>

-   Un ejemplo en [esta web](https://vizdata.org/). Es un curso de Mine Çetinkaya-Rundel en el que el calendario de sesiones se carga desde un archivo de Google Sheets. El código para hacer la tabla puedes verlo [aquí](https://github.com/vizdata-s23/vizdata-s23/blob/main/index.qmd). El documento de Google está [aquí](https://docs.google.com/spreadsheets/d/1Qj2rcIqFGwOosr9Yiyo-MaeFSZ7KOYNn8Ph1kebgDuY/edit)

:::


### 6.5 Un poco más de tablas 


<br>

. . . 

**¿Cómo hacer tablas más chulas?**

-   En [este post](../blog/71_tablas-con-R.html){target="_blank"} explica en detalle cómo se pueden hacer tablas muy chulas con R


. . . 


<br>

**Tablas estadísticas**


- Muchas veces hay que **presentar los resultados** de contrastes o de la **estimación de modelos estadísticos**. En estos casos, **las tablas** son una herramienta muy útil para **presentar los resultados** de una manera clara y concisa.


-   Vamos a profundizar en ello con [este post](../blog/73_tablas-de-modelos.qmd){target="_blank"} del blog



### 6.6 Informes parametrizados

- A veces necesitamos **generar informes** con **datos diferentes**. Por ejemplo, un informe de ventas de diferentes productos, o un informe para cada municipio, o un informe para cada periodo

- En [este post](../blog/30_informes-parametrizados.qmd){target="_blank"} del blog se explica cómo hacerlo.

- Muchas veces es más fácil hacerlo que contarlo, así que:



::: {.callout-important icon="false"}
#### Tarea 6.6: Aprender a hacer informes parametrizados


- Para ello, vamos a usar el Qproject llamado "Qproj_02_param-rep" que puedes descargarte [aquí](../recursos/Qproj_02_param-rep.zip){target="_blank"}


:::


<br>







### Journal articles

-   El curso se ha centrado en la realización de documentos `.html` pero desde Quarto se pueden generar documentos en [múltiples formatos](https://quarto.org/docs/output-formats/all-formats.html).

-   Además, disponemos de **plantillas** para generar, directamente desde Quarto, documentos en el formato adecuado para un conjunto de Journals. Puedes ver el **listado de Journals** [aquí](https://quarto.org/docs/journals/) y [aquí](https://github.com/mcanouil/awesome-quarto#journals)

-   En **Rmarkdown** tenemos el paquete [rticles](https://pkgs.rstudio.com/rticles/) con plantillas para generar documentos de un conjunto amplio de [Journals](https://pkgs.rstudio.com/rticles/#templates)

::: {.callout-warning collapse="true" appearance="default" icon="false"}
#### Extensión: más sobre publicación en Journals desde Quarto

-   Un [hilo de Mastodon](https://fosstodon.org/@MikeMahoney218/110016333650289913) con las vicisitudes de M. Mahoney para publicar en Elsevier desde Quarto:

-   [Journals](https://www.software.ac.uk/which-journals-should-i-publish-my-software) para publicar código.

-   [Esta charla](https://fosstodon.org/@Posit/110470020629680463) de Mine Çetinkaya-Rundel habla de este tema en el minuto 14 aprox.
:::


## Con Quarto **AÚN** se pueden hacer muu:scream_cat:uuchas más cosas!! {.unnumbered background-color="#ebf5fb"}

{{< var lineanaranja >}}

<br>

Veamos algunas de ellas



### Diagramas (con Mermaid y Graphviz)

-   Quarto permite hacer **diagramas** con [Mermaid](https://mermaid.js.org/#/) y [Graphviz](https://graphviz.org/). Lo que, según la [documentación oficial](https://quarto.org/docs/authoring/diagrams.html#mermaid-theming), posibilita la creación de flowcharts, sequence diagrams, state diagrams, Gantt charts, and more **usando una sintaxis** (de texto) **similar a Markdown**.

. . .

-   Un ejemplo:

<br>

::: columns
::: {.column witdth="35%"}
El código

```{{mermaid}}
flowchart LR
  qmd --> J([Jupyter])
  qmd --> K([knitr])
  J --> md
  K --> md
  md --> P([pandoc])
  P --> pdf
  P --> html
  P --> docx
```
:::

::: {.column witdth="50%"}
El resultado:

```{mermaid}
%%| echo: false
flowchart LR
  qmd --> J([Jupyter])
  qmd --> K([knitr])
  J --> md
  K --> md
  md --> P([pandoc])
  P --> pdf
  P --> html
  P --> docx
```
:::
:::

<br>

---

##### Diagramas (con Mermaid y Graphviz)


-   Otro ejemplo

```{mermaid}
%%| echo: fenced
gantt
dateFormat  YYYY-MM-DD
title Adding GANTT diagram to mermaid
excludes weekdays 2014-01-10

section A section
Completed task            :done,    des1, 2014-01-06,2014-01-08
Active task               :active,  des2, 2014-01-09, 3d
Future task               :         des3, after des2, 5d
Future task2              :         des4, after des3, 5d
```


<br>

::: {.callout icon="false"}
- En los  "mermaid diagramms", **se pueden utilizar themes** en los. Documentación [aquí](https://quarto.org/docs/authoring/diagrams.html#using-mermaids-built-in-themes)

- Ejemplos más complejos de Mermaid [aquí](https://mermaid.js.org/intro/)

- Ejemplos de GraphViz [aquí](https://graphviz.org/gallery/)
:::

<br>


### Countdown

-   Incluir un **reloj para hacer cuentas atrás** cuando pones un ejercicio a resolver en clase. Documentación [aquí](https://pkg.garrickadenbuie.com/countdown/#1)

<br>


::: {.callout-important icon="false"}
#### Tarea: Incorporar un "countdown" a un documento .qmd

```{{r}}
# devtools::install_github("gadenbuie/countdown")
countdown::countdown(minutes = 0, seconds = 44)
```

:::


### Crear un glosario de términos

-   El paquete [glossary](https://debruine.github.io/glossary/) permite crear un glosario de términos al final de un documento `.html` y referenciar términos del glosario en el texto.

. . .

-   ¿Cómo? No he llegado a probarlo pero básicamente tienes que

|      - crear el glosario de términos en un documento `.yml`,

|      - proporcionar su ruta a la función `glossary_path()`

. . .

-   Para añadir un término al glosario:

```{r}
#| eval: false
glossary_add(term = "Ishi",
             def = "Ishi fue el nombre dado al último miembro de la tribu de los yahi de California, Estados Unidos. La palabra ishi significa hombre en idioma yahi."
```

. . .

-   Para referenciar palabras del glosario en el texto, se hace algo como:

> Se considera a `glossary::glossary("Ishi")` el último nativo de la California septentrional que vivió fuera de la influencia de la cultura occidental. Su historia se popularizó a raíz de un libro de Theodora Kroeber, madre de Ursula K. Le Guin.

. . .

-   Además, puedes definir el estilo del glosario con `glossary_style()`. Por ejemplo:

```{r}
#| eval: false
glossary::glossary_path("psyteachr.yml")
glossary::glossary_style("purple", "underline")
```

<br>

### Crear botones de descarga

-   Se trata de crear unos botoncitos (chulos!!) en nuestra web que sirvan para descargarse los documentos (o recursos) que queramos

. . .

<br>

-   Vamos a probar a hacer estos botones con la extensión [downloadthis](https://github.com/shafayetShafee/downloadthis).

-   Para ello vamos a usar la documentación de la extensión y [este post](../blog/70_botoncitos-web.qmd){target="_blank"} del blog del curso.

### Extensiones

-   En el curso se habla de las extensiones. En las slides nº5, concretamente [aquí](https://perezp44.github.io/intro.to.quarto/slides/05_primer_web.html?q=extens#/extensiones) y en [este post](../blog/23_extensiones.qmd#listado-de-extensiones){target="_blank"} y en [este otro](/blog/70_botoncitos-web.html){target="_blank"}

-   [Aquí](https://www.paltmeyer.com/blog/posts/quarto-extensions/) un post que cuenta como hacer extensiones

. . .

-   Por ejemplo podemos probar a usar la extensión [fontawesome](https://github.com/quarto-ext/fontawesome).

. . .

<br>

#### Algunas extensiones chulas:

-   [code-fullscreen](https://github.com/shafayetShafee/code-fullscreen): permite que al pinchar en un **bloque de código**, este pase a estar **a pantalla completa**

-   [nustshell](https://github.com/schochastics/quarto-nutshell): permite crear **"expandable explanations"**. Lo mejor es pinchar y ver los ejemplos

-   [collapse-social-embeds](https://github.com/shafayetShafee/collapse-social-embeds): permite crear 6 tipos de **nuevos callouts** para social contents (Github gist, Twitter tweets, Mastodon toots, y vídeos de Loom, Vimeo y Youtube). Puedes ver un ejemplo [aquí](https://shafayetshafee.github.io/collapse-social-embeds/example.html). Seguramente acabaré usándolo en el curso!!

-   [downloadthis](https://github.com/shafayetShafee/downloadthis): permite crear botones de descargar muy chulos. Ya la hemos usado

-   [pointer](https://github.com/quarto-ext/pointer) y [quarto-spotlight](https://github.com/mcanouil/quarto-spotlight): 2 extensiones para **iluminar**/agrandar el **puntero del ratón** en revealjs slides

-   [line-highlight](https://github.com/shafayetShafee/line-highlight): similar a `code-line-numbers` pero ahora es para documentos html, no para RevealJs slides

-   [webR](https://github.com/coatless/quarto-webr): permite to run R code in the browser without the need for an R server to execute the code!!

-   [Sverto](https://360-info.github.io/sverto/): permite incorporar Svelte components that can seamlessly react to your ObservableJS code!!!

-   [quarto-animate](https://github.com/mcanouil/quarto-animate): permite crear unas animaciones muy "aparatosas". Puedes ver un ejemplo [aquí](https://m.canouil.dev/quarto-animate/)



### Curriculums con Quarto

Desde Quarto se pueden hacer curriculums. Por ejemplo:

. . .

-   Plantilla para crear CV con Quarto: [quarto-cv](https://github.com/mps9506/quarto-cv)

-   Otra plantilla para hacer CV's, de `@BeaMilz`: el [código](https://github.com/beatrizmilz/resume/blob/master/docs/index.qmd) y el [resultado](https://beatrizmilz.github.io/resume/index.pdf)

-   Tengo el CV en un `.docx` ¿puedo pasarlo a Quarto? Sí, [aquí](https://sciences.social/@CoffeeBaseball/110027602855581359) la explicación. Aconsejan pasarlo primero a Google doc's

<br>

. . .

#### CV's con `.Rmd`

-   Un **currículum** con [pagedown::html_resume](https://github.com/rstudio/pagedown#resume-pagedownhtml_resume).

-   Curriculum con [datadrivencv](https://github.com/nstrayer/datadrivencv) package

### Posters con Quarto

-   Yo aún no he visto que se pueda, pero [la gente esta esperando](https://github.com/quarto-dev/quarto-cli/discussions/2205) poder hacer posters con Quarto

. . .

-   Con `.Rmd` habían varios paquetes para hacer posters, por ejemplo con [posterdown](https://github.com/brentthorne/posterdown) o con [pagedown::poster_relaxed](https://github.com/rstudio/pagedown#resume-pagedownhtml_resume).

### Más formatos con `.Rmd`

<br>

-   **Business cards** con [pagedown::business_card](https://github.com/rstudio/pagedown#business-cards-pagedownbusiness_card)

<br>

-   **"Cuadros de mando"** con [flexdashboard](https://pkgs.rstudio.com/flexdashboard/): tienes algunos ejemplos [aquí](https://pkgs.rstudio.com/flexdashboard/articles/examples.html). Permite [distintos layouts](https://pkgs.rstudio.com/flexdashboard/articles/layouts.html), incluidos los [storyboards](https://pkgs.rstudio.com/flexdashboard/articles/using.html#storyboards), por ejemplo [este](https://beta.rstudioconnect.com/jjallaire/htmlwidgets-showcase-storyboard/htmlwidgets-showcase-storyboard.html)

<br>

-   **Shiny apps** con el paquete [shiny](https://shiny.rstudio.com/): algunos [ejemplos](https://shiny.rstudio.com/gallery/)

<br>

-   Formatos posibles gracias al paquete [rmdformats](https://github.com/juba/rmdformats)

### Trucos [CSS](https://www.w3schools.com/css/) y [SASS](https://sass-lang.com/)

<br>

-   En el improbable caso de que tengamos tiempo, veremos **algunos trucos para tunear** algunos aspectos de nuestros documentos y web/blog

<br>

-   Lo haríamos con [este post](../blog_02/04_trucos_css.qmd){target="_blank"} del blog de "truqillos" del curso

# **AÚN** :scream_cat: más cosas!!! {background-color="#b8c2aa"}

{{< var lineanaranja >}}

<br>

Ejemplos que se me han quedado en el tintero (quizás para otra edición)

### Runing Stata in Quarto documents

Tampoco lo he probado, entre otras cosas porque no tengo Stata instalado, pero :

. . .

<br>

-   Podemos correr código de Stata en Quarto document: [aquí](https://www.stata.com/python/pystata/notebook/Quick%20Start0.html) se explica cómo usando un paquete de Phyton, `pystata`.

<br>

-   [Stata Facade](https://github.com/CenterOnBudget/quarto-stata-facade): una extensión de Quarto that hides the evidence of faking Stata dynamic content with Python code blocks and Stata cell magic.

<br>

-   También se puede con R: [Statamarkdown](https://rpubs.com/quarcs-lab/stata-from-Rstudio) y [RStata](https://ignacioriveros1.github.io/r/2020/03/22/r_and_stata.html)

### Runing SPSS in Quarto documents

<br>

No he visto que sea posible correr SPSS code dentro de R, pero para que tenemos [R GUI's](https://r4stats.com/articles/software-reviews/r-gui-comparison/). Otra [comparación de GUI's](https://www.ubuntupit.com/best-free-graphical-user-interfaces-for-r/). Un post sobre [Jamovi](https://r4stats.com/2018/02/13/jamovi-for-r-easy-but-controversial/)

. . .

<br>

-   [r2spss](https://github.com/aalfons/r2spss) y su [vignette](https://cran.r-project.org/web/packages/r2spss/vignettes/r2spss-intro.pdf)

-   [Rmimic](https://github.com/mattpontifex/Rmimic)

-   [expss](https://cran.r-project.org/web/packages/expss/)

### Shiny en Quarto

-   <https://appsilon.com/interactive-quarto-report-translation-tutorial/#final>

### Queries to bibliographc databases

-   [**openalexR**](https://docs.ropensci.org/openalexR/): "helps you interface with the [OpenAlex](https://docs.ropensci.org/openalexR/) API to retrieve bibliographic infomation about publications, authors, venues, institutions and **concepts**"

-   [**rscielo**](https://github.com/meirelesff/rscielo): "offers functions to easily scrape bibliometric information from scientific journals and articles hosted on the [Scileo Platform](https://www.scielo.br/)

-   [**JCRImpactFactor**](https://cran.r-project.org/web/packages/JCRImpactFactor/index.html): "JCRImpactFactor: Journal Citation Reports ('JCR') Impact Factor by Clarivate Analytics"

-   [Scrapping WOS](https://stackoverflow.com/questions/27754051/how-to-retrieve-informations-about-journals-from-isi-web-of-knowledge)

-   [Bibliometrix](https://github.com/massimoaria/bibliometrix): "bibliometrix package provides a set of tools for quantitative research in bibliometrics and scientometrics"

-   [RISmed](https://cran.r-project.org/web/packages/RISmed/index.html): A set of tools to extract bibliographic content from the National Center for Biotechnology Information (NCBI) databases, including PubMed.

### Trabajando con documentos WORD

-   [officedown](https://davidgohel.github.io/officedown/): facilita el formateo de informe de Word desde R. [Aquí](https://ardata-fr.github.io/officeverse/) un libro y dos posts: [aquí](https://www.business-science.io/code-tools/2024/02/24/make-microsoft-word-reports-officedown.html), otro [aquí](https://www.apreshill.com/blog/2021-07-officedown/)

<br>

-   [officer](https://davidgohel.github.io/officer/): The officer package lets R users manipulate Word (.docx) and PowerPoint (\*.pptx) documents. In short, one can add images, tables and text into documents from R.

<br>

-   [docxtractr](https://gitlab.com/hrbrmstr/docxtractr): Extract Data Tables and Comments from Microsoft Word Documents. [Aquí](https://www.brodrigues.co/blog/2023-03-18-docxtractr/) un post sobre su uso.

### Plantillas/cosas de pdf's

-   Plantillas para hacer pretty pdfs: [aquí](https://nrennie.rbind.io/blog/making-pretty-pdf-quarto/) y [aquí](https://rfortherestofus.com/2021/01/announcing-pagedreport/)

-   Plantilla para [compact pdf](https://github.com/arcruz0/quarto-compact)

-   Nicola Rennie te dice cómo hacer pdfs parámetrizados: [aquí](https://meghan.rbind.io/blog/quarto-pdfs/)

-   Quarto YouTube [Playlist](https://www.youtube.com/playlist?list=PLDqZV53PcnYxnBYuEdSBxnOwdKLGaoKGg)

-   Title Pages [templates](https://nmfs-opensci.github.io/quarto_titlepages/) for adding a cover page to your Quarto pdf books. Un [ejemplo](https://nmfs-opensci.github.io/quarto_titlepages/titlepages/great-wave/article.pdf)

-   Great looking pdf with pagedown: vídeo [aquí](https://www.youtube.com/watch?v=jiYVkyWGrbs)

<br>

-   Muchísimas más en [Quarto awesome](https://github.com/mcanouil/awesome-quarto)

<br>

##### Otras plantillas

-   Un instituto de física: <https://github.com/sebdunnett/quarto-iop>

-   [quarto-lcars-theme](https://github.com/mccarthy-m-g/quarto-lcars-theme):

### Ejemplitos (de copiar y hacer)

-   [Quarto sketchy html](https://github.com/schochastics/quarto-sketchy-html)

-   [Slides chulas](https://mine-cetinkaya-rundel.github.io/2022-repro-toronto/#/title-slide) pero sencillas de Mine. El repo [aquí](https://github.com/mine-cetinkaya-rundel/2022-repro-toronto)

-   Un ejemplo de slides chulas: [Intro to Quarto](https://ivelasq.quarto.pub/intro-to-quarto/), el repo [aquí](https://github.com/ivelasq/2022-10-27_intro-to-quarto).

-   Un **póster** con [posterdown](https://github.com/brentthorne/posterdown) o con [pagedown::poster_relaxed](https://github.com/rstudio/pagedown#resume-pagedownhtml_resume).

-   **Business cards** con [pagedown::business_card](https://github.com/rstudio/pagedown#business-cards-pagedownbusiness_card)

-   **"Cuadros de mando"** con [flexdashboard](https://pkgs.rstudio.com/flexdashboard/): tienes algunos ejemplos [aquí](https://pkgs.rstudio.com/flexdashboard/articles/examples.html). Permite [distintos layouts](https://pkgs.rstudio.com/flexdashboard/articles/layouts.html), incluidos los [storyboards](https://pkgs.rstudio.com/flexdashboard/articles/using.html#storyboards), por ejemplo [este](https://beta.rstudioconnect.com/jjallaire/htmlwidgets-showcase-storyboard/htmlwidgets-showcase-storyboard.html)

-   **Shiny apps** con el paquete [shiny](https://shiny.rstudio.com/): algunos [ejemplos](https://shiny.rstudio.com/gallery/)

-   Formatos posibles gracias al paquete [rmdformats](https://github.com/juba/rmdformats)

``` r
pak::pak('rstudio/pagedown')
```
